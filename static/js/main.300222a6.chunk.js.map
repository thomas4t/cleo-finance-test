{"version":3,"sources":["components/Layout/Navbar.js","components/Layout/MainContainer.js","components/RepositoriesPage/ReposFilters.js","components/RepositoriesPage/ReposTable.js","components/RepositoriesPage/ReposWrapper.js","components/RepositoriesPage/index.js","components/HomePage/search/UserSearch.js","components/HomePage/userInfo/UserBio.js","components/HomePage/userInfo/UserDetails.js","components/HomePage/userInfo/UserDetailsContainer.js","components/HomePage/index.js","App.js","reducers/rootReducer.js","index.js"],"names":["StyledNav","styled","div","StyledLink","Link","Navbar","props","to","MainContainer","StyledInputDiv","ReposFilters","className","type","placeholder","onChange","handleFilterByNameChange","onClick","handleStarFilterChange","TableContainer","ReposTable","selectedUsersRepos","useSelector","state","React","useState","displayedRepos","setDisplayedRepos","isStarFilterOn","setIsStarFiterOn","useEffect","sortReposByStars","cloned","sort","a","b","stargazers_count","filterReposByName","query","newRepos","filter","repo","name","includes","console","log","e","filterVal","target","value","checked","map","key","id","href","svn_url","rel","LoaderDiv","ReposWrapper","fetchingUsersRepos","color","height","width","length","owner","login","UserRepos","StyledForm","Form","UserSearch","initialValues","validationSchema","Yup","min","max","required","matches","onSubmit","values","handleFormSubmit","component","disabled","fetchingUsers","StyledDiv","UserBio","fetchingUserBio","isBioDisplayed","userDetailedInfo","public_repos","bio","UserDiv","UserDetails","setUserDetailedInfo","setFetchingUserBio","setIsBioDisplayed","dispatch","useDispatch","fetchUserBio","axios","get","response","data","fetchUserRepos","val","src","user","avatar_url","alt","html_url","DetailsContainer","UserDetailsContainer","searchResults","Home","setFetchingUsers","fetchUsers","items","App","path","exact","initialState","rootReducer","action","newState","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.300222a6.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledNav = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background-color: #fff;\r\n  padding: 1vmin;\r\n`;\r\n\r\nconst StyledLink = styled(Link)`\r\n  padding: 10px 2vmin;\r\n  text-decoration: none;\r\n  color: #000;\r\n  :hover {\r\n    color: #fff;\r\n    background-color: rgba(0, 0, 0, 0.7);\r\n    border-radius: 5px;\r\n  }\r\n`;\r\n\r\nconst Navbar = (props) => {\r\n  return (\r\n    <StyledNav>\r\n      <StyledLink to=\"/\">\r\n        <strong>Find a user</strong>\r\n      </StyledLink>\r\n      <StyledLink to=\"/userRepos\">\r\n        <strong>User's repositories</strong>\r\n      </StyledLink>\r\n    </StyledNav>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import styled from \"styled-components\";\r\n\r\nconst MainContainer = styled.div`\r\n  text-align: center;\r\n  background-color: #282c34;\r\n  min-height: 100vh;\r\n  font-size: calc(10px + 2vmin);\r\n  color: white;\r\n  .colorTest {\r\n    color: #61dafb;\r\n  }\r\n`;\r\n\r\nexport default MainContainer;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nconst StyledInputDiv = styled.div`\r\n  width: 40vw;\r\n  margin: auto;\r\n  padding: 1% 0 2%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  user-select: none;\r\n  @media only screen and (max-width: 1200px) {\r\n    width: 75vw;\r\n  }\r\n  @media only screen and (max-width: 768px) {\r\n    width: 85vw;\r\n  }\r\n  @media only screen and (max-width: 480px) {\r\n    width: 95vw;\r\n  }\r\n  .text-input {\r\n    padding: 10px 20px;\r\n    outline: none;\r\n    border: none;\r\n    border-radius: 5px;\r\n  }\r\n  .text-input:hover,\r\n  .text-input:focus {\r\n    border: 2px solid #61dafb;\r\n    padding: 8px 18px;\r\n  }\r\n  label {\r\n    padding-left: 2%;\r\n    input {\r\n      margin: 10px;\r\n    }\r\n    input:hover {\r\n      cursor: pointer;\r\n    }\r\n  }\r\n  label:hover {\r\n    color: #61dafb;\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nconst ReposFilters = (props) => {\r\n  return (\r\n    <StyledInputDiv>\r\n      <input\r\n        className=\"text-input\"\r\n        type=\"text\"\r\n        placeholder=\"Filter repos by name\"\r\n        onChange={props.handleFilterByNameChange}\r\n      />\r\n      <label>\r\n        Sort by star gazers\r\n        <input\r\n          type=\"checkbox\"\r\n          className=\"checkbox\"\r\n          onClick={props.handleStarFilterChange}\r\n        ></input>\r\n      </label>\r\n    </StyledInputDiv>\r\n  );\r\n};\r\n\r\nexport default ReposFilters;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport ReposFilters from \"./ReposFilters\";\r\n\r\nconst TableContainer = styled.div`\r\n  width: 40vw;\r\n  margin: auto;\r\n  padding: 10px;\r\n  border: 1px solid rgba(255, 255, 255, 0.2);\r\n  border-radius: 10px;\r\n  @media only screen and (max-width: 1200px) {\r\n    width: 75vw;\r\n  }\r\n  @media only screen and (max-width: 768px) {\r\n    width: 85vw;\r\n  }\r\n  @media only screen and (max-width: 480px) {\r\n    width: 95vw;\r\n  }\r\n  table {\r\n    width: 100%;\r\n    margin: auto;\r\n    border: 1px solid rgba(255, 255, 255, 0.2);\r\n    border-radius: 5px;\r\n    background-color: rgba(255, 255, 255, 0.2);\r\n    th {\r\n      font-size: 1em;\r\n    }\r\n    .th-star-gazers {\r\n      padding: 0 2%;\r\n    }\r\n    .name {\r\n      text-align: center;\r\n      font-size: 0.9em;\r\n      a {\r\n        text-decoration: none;\r\n        color: #fff;\r\n      }\r\n      a:hover {\r\n        color: #61dafb;\r\n      }\r\n    }\r\n    .star-gazers {\r\n      text-align: center;\r\n      font-size: 0.9em;\r\n      padding-right: 2%;\r\n    }\r\n  }\r\n`;\r\n\r\nconst ReposTable = (props) => {\r\n  const selectedUsersRepos = useSelector((state) => state.selectedUsersRepos);\r\n  const [displayedRepos, setDisplayedRepos] = React.useState(\r\n    selectedUsersRepos\r\n  );\r\n  const [isStarFilterOn, setIsStarFiterOn] = React.useState(false);\r\n\r\n  React.useEffect(() => {\r\n    setDisplayedRepos(selectedUsersRepos);\r\n  }, [selectedUsersRepos]);\r\n\r\n  const handleFilterByNameChange = (e) => {\r\n    let filterVal = e.target.value;\r\n    filterReposByName(filterVal);\r\n  };\r\n  const handleStarFilterChange = (e) => {\r\n    setIsStarFiterOn(e.target.checked);\r\n    //if query param is empty,\r\n    console.log(e.target.checked);\r\n    if (e.target.checked) {\r\n      sortReposByStars();\r\n    }\r\n  };\r\n\r\n  const sortReposByStars = () => {\r\n    const cloned = [...displayedRepos];\r\n    cloned.sort((a, b) => b.stargazers_count - a.stargazers_count);\r\n    setDisplayedRepos(cloned);\r\n  };\r\n  const filterReposByName = (query) => {\r\n    const newRepos = selectedUsersRepos.filter((repo) =>\r\n      repo.name.includes(query)\r\n    );\r\n    //If star filter is on, filter it further\r\n    if (isStarFilterOn) {\r\n      console.log(\"I SHOULD ALSO FILTER IT BY STARS\");\r\n      newRepos.sort((a, b) => b.stargazers_count - a.stargazers_count);\r\n      setDisplayedRepos(newRepos);\r\n      //sortReposByStars();\r\n    } else {\r\n      console.log(\"leave it as is\");\r\n      setDisplayedRepos(newRepos);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ReposFilters\r\n        handleFilterByNameChange={handleFilterByNameChange}\r\n        handleStarFilterChange={handleStarFilterChange}\r\n      />\r\n      <TableContainer>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>Name</th>\r\n              <th className=\"th-star-gazers\">Star gazers</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {displayedRepos.map((repo) => {\r\n              return (\r\n                <tr key={repo.id}>\r\n                  <td className=\"name\">\r\n                    <a\r\n                      name=\"repo-name\"\r\n                      href={repo.svn_url}\r\n                      target=\"_blank\"\r\n                      rel=\"noopener noreferrer\"\r\n                    >\r\n                      {repo.name}\r\n                    </a>\r\n                  </td>\r\n                  <td>{repo.stargazers_count}</td>\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </TableContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ReposTable;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport ReactLoading from \"react-loading\";\r\nimport ReposTable from \"./ReposTable\";\r\n\r\nconst StyledLink = styled(Link)`\r\n  text-decoration: underline;\r\n  color: #fff;\r\n  :hover {\r\n    color: #61dafb;\r\n    cursor: pointer;\r\n  }\r\n`;\r\nconst LoaderDiv = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  margin: 5%;\r\n`;\r\n\r\nconst ReposWrapper = (props) => {\r\n  const selectedUsersRepos = useSelector((state) => state.selectedUsersRepos);\r\n  const fetchingUsersRepos = useSelector((state) => state.fetchingUsersRepos);\r\n\r\n  //Loader\r\n  if (fetchingUsersRepos) {\r\n    return (\r\n      <LoaderDiv>\r\n        <ReactLoading\r\n          type={\"bars\"}\r\n          color={\"#61dafb\"}\r\n          height={\"10%\"}\r\n          width={\"10%\"}\r\n        />\r\n      </LoaderDiv>\r\n    );\r\n  }\r\n  //Displaying results based on their contents\r\n  if (selectedUsersRepos === null) {\r\n    return <p>You have to select a user first.</p>;\r\n  } else if (selectedUsersRepos.length === 0) {\r\n    return (\r\n      <div>\r\n        <p>\r\n          Unfortunately, selected user does not have any public repositories.\r\n        </p>\r\n        <StyledLink to=\"/\">Try again</StyledLink>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div>\r\n        <p>Public repositories of {selectedUsersRepos[0].owner.login}</p>\r\n        <ReposTable />\r\n      </div>\r\n    );\r\n  }\r\n};\r\nexport default ReposWrapper;\r\n","import React from \"react\";\r\nimport Navbar from \"../Layout/Navbar\";\r\nimport MainContainer from \"../Layout/MainContainer\";\r\nimport ReposTable from \"./ReposWrapper\";\r\n\r\nconst UserRepos = (props) => {\r\n  // const dispatch = useDispatch();\r\n  return (\r\n    <MainContainer>\r\n      <header>\r\n        <Navbar />\r\n      </header>\r\n      <ReposTable />\r\n    </MainContainer>\r\n  );\r\n};\r\n\r\nexport default UserRepos;\r\n","import React from \"react\";\r\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledForm = styled(Form)`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  #queryInput {\r\n    div {\r\n      color: #61dafb;\r\n      font-size: calc(10px + 0.8vmin);\r\n    }\r\n  }\r\n  input {\r\n    padding: 10px 20px;\r\n    outline: none;\r\n    margin-top: 10%;\r\n    border: none;\r\n    border-radius: 5px;\r\n  }\r\n  input:hover,\r\n  input:focus {\r\n    border: 2px solid #61dafb;\r\n    padding: 8px 18px;\r\n  }\r\n\r\n  button {\r\n    background-color: #000;\r\n    color: #fff;\r\n    text-decoration: none;\r\n    padding: 10px 20px 10px 20px;\r\n    margin: 1%;\r\n    border: 1px solid white;\r\n    border-radius: 10px;\r\n    font-weight: 700;\r\n    outline: none;\r\n  }\r\n  button:hover {\r\n    color: #61dafb;\r\n    background-color: rgba(255, 255, 255, 0.1);\r\n  }\r\n  button:disabled,\r\n  button[disabled] {\r\n    border: 1px solid #999999;\r\n    background-color: #cccccc;\r\n    color: #666666;\r\n  }\r\n`;\r\n\r\nconst UserSearch = (props) => {\r\n  return (\r\n    <>\r\n      <Formik\r\n        initialValues={{ query: \"\" }}\r\n        validationSchema={Yup.object({\r\n          query: Yup.string()\r\n            .min(3, \"Must be 3 characters or more\")\r\n            .max(15, \"Must be 15 characters or less\")\r\n            .required(\"Cannot be empty\")\r\n            .matches(\r\n              /^[a-z\\d](?:[a-z\\d]|-(?=[a-z\\d])){0,38}$/i,\r\n              \"Invalid user name\"\r\n            ),\r\n        })}\r\n        onSubmit={(values) => {\r\n          props.handleFormSubmit(values.query);\r\n        }}\r\n      >\r\n        <StyledForm>\r\n          <div id=\"queryInput\">\r\n            <Field name=\"query\" type=\"text\" placeholder=\"Find a user\" />\r\n            <ErrorMessage name=\"query\" component=\"div\" />\r\n          </div>\r\n          <button type=\"submit\" disabled={props.fetchingUsers}>\r\n            Search\r\n          </button>\r\n        </StyledForm>\r\n      </Formik>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UserSearch;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport ReactLoading from \"react-loading\";\r\n\r\nconst StyledDiv = styled.div`\r\n  font-size: 0.7em;\r\n`;\r\n\r\nconst LoaderDiv = styled.div`\r\n  margin: 10%;\r\n`;\r\n\r\nconst UserBio = (props) => {\r\n  //Loader\r\n  if (props.fetchingUserBio) {\r\n    return (\r\n      <LoaderDiv>\r\n        <ReactLoading\r\n          type={\"cylon\"}\r\n          color={\"#61dafb\"}\r\n          height={\"10%\"}\r\n          width={\"10%\"}\r\n        />\r\n      </LoaderDiv>\r\n    );\r\n  }\r\n  //Deciding whether bio gets rendered or not\r\n  if (!props.isBioDisplayed) {\r\n    return null;\r\n  } else {\r\n    return (\r\n      <StyledDiv>\r\n        <p>\r\n          Amount of public repositories: {props.userDetailedInfo.public_repos}\r\n        </p>\r\n        <p>\r\n          Name:{\" \"}\r\n          {props.userDetailedInfo.name === null\r\n            ? \"Not provided\"\r\n            : props.userDetailedInfo.name}\r\n        </p>\r\n        <p>\r\n          Bio:{\" \"}\r\n          {props.userDetailedInfo.bio === null\r\n            ? \"Not provided\"\r\n            : props.userDetailedInfo.bio}\r\n        </p>\r\n      </StyledDiv>\r\n    );\r\n  }\r\n};\r\n\r\nexport default UserBio;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport axios from \"axios\";\r\nimport UserBio from \"./UserBio\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useDispatch } from \"react-redux\";\r\nconst UserDiv = styled.div`\r\n  display: flex;\r\n  align-self: flex-start;\r\n  height: auto;\r\n  margin: 1vmin auto;\r\n  img {\r\n    width: 10vmin;\r\n    height: 10vmin;\r\n    min-width: 50px;\r\n    min-height: 50px;\r\n  }\r\n  .avatarDiv {\r\n    width: 25%;\r\n    display: flex;\r\n    align-self: center;\r\n    align-content: center;\r\n    justify-content: center;\r\n  }\r\n  .descriptionDiv {\r\n    width: 75%;\r\n    text-align: left;\r\n    span {\r\n      a {\r\n        color: #fff;\r\n        text-decoration: none;\r\n      }\r\n      a:hover {\r\n        text-decoration: underline;\r\n      }\r\n    }\r\n  }\r\n  .userBio {\r\n    display: block;\r\n    padding: 1px;\r\n    font-size: 0.6em;\r\n    font-weight: bold;\r\n    text-decoration: underline;\r\n    background: none;\r\n    border: none;\r\n    outline: none;\r\n    color: #61dafb;\r\n    :hover {\r\n      color: #fff;\r\n      cursor: pointer;\r\n    }\r\n  }\r\n  .userReposBtn {\r\n    font-size: 1rem;\r\n    button {\r\n      background-color: rgba(255, 255, 255, 0.9);\r\n      color: #000;\r\n      border: none;\r\n      text-decoration: none;\r\n      padding: 5px 10px;\r\n      margin: 10px 0 10px 0;\r\n      border-radius: 10px;\r\n      font-weight: 700;\r\n      outline: none;\r\n    }\r\n    button:hover {\r\n      color: #000;\r\n      background-color: rgba(255, 255, 255, 0.7);\r\n      cursor: pointer;\r\n    }\r\n  }\r\n  border: 1px solid rgba(255, 255, 255, 0.2);\r\n  border-radius: 5px;\r\n  background-color: rgba(255, 255, 255, 0.2);\r\n`;\r\n\r\nconst UserDetails = (props) => {\r\n  const [userDetailedInfo, setUserDetailedInfo] = React.useState(null);\r\n  const [fetchingUserBio, setFetchingUserBio] = React.useState(false);\r\n  const [isBioDisplayed, setIsBioDisplayed] = React.useState(false);\r\n  const dispatch = useDispatch();\r\n\r\n  const fetchUserBio = async (name) => {\r\n    setFetchingUserBio(true);\r\n    const response = await axios.get(`https://api.github.com/users/${name}`);\r\n    setUserDetailedInfo(response.data);\r\n    setFetchingUserBio(false);\r\n  };\r\n\r\n  const fetchUserRepos = async (login) => {\r\n    //set loading to true\r\n    dispatch({\r\n      type: \"FETCHING_USERS_REPOS\",\r\n      val: true,\r\n    });\r\n    const response = await axios.get(\r\n      `https://api.github.com/users/${login}/repos`\r\n    );\r\n    dispatch({\r\n      type: \"SET_SELECTED_USERS_REPOS\",\r\n      val: response.data,\r\n    });\r\n    dispatch({\r\n      type: \"FETCHING_USERS_REPOS\",\r\n      val: false,\r\n    });\r\n  };\r\n\r\n  const handleOnShowReposClick = (user) => {\r\n    fetchUserRepos(user.login);\r\n  };\r\n  const handleOnShowBioClick = () => {\r\n    setIsBioDisplayed(true);\r\n    if (userDetailedInfo === null) {\r\n      fetchUserBio(props.user.login);\r\n    }\r\n  };\r\n  const handleOnHideBioClick = () => {\r\n    setIsBioDisplayed(false);\r\n  };\r\n\r\n  return (\r\n    <UserDiv>\r\n      <div className=\"avatarDiv\">\r\n        <img src={props.user.avatar_url} alt={props.user.login}></img>\r\n      </div>\r\n      <div className=\"descriptionDiv\">\r\n        <span>\r\n          <a\r\n            name=\"users-name\"\r\n            href={props.user.html_url}\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            {props.user.login}\r\n          </a>\r\n        </span>\r\n        {!isBioDisplayed ? (\r\n          <button\r\n            className=\"userBio\"\r\n            onClick={() => handleOnShowBioClick()}\r\n            disabled={fetchingUserBio}\r\n          >\r\n            Show more info\r\n          </button>\r\n        ) : (\r\n          <button className=\"userBio\" onClick={() => handleOnHideBioClick()}>\r\n            Hide info\r\n          </button>\r\n        )}\r\n        <UserBio\r\n          userDetailedInfo={userDetailedInfo}\r\n          fetchingUserBio={fetchingUserBio}\r\n          isBioDisplayed={isBioDisplayed}\r\n        />\r\n\r\n        <div className=\"userReposBtn\">\r\n          <Link to=\"/userRepos\">\r\n            <button onClick={() => handleOnShowReposClick(props.user)}>\r\n              Show user's repos\r\n            </button>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </UserDiv>\r\n  );\r\n};\r\n\r\nexport default UserDetails;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport UserDetails from \"./UserDetails\";\r\nimport ReactLoading from \"react-loading\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst DetailsContainer = styled.div`\r\n  width: 40vw;\r\n  margin: auto;\r\n  padding: 10px;\r\n  border: 1px solid rgba(255, 255, 255, 0.2);\r\n  border-radius: 10px;\r\n  @media only screen and (max-width: 1200px) {\r\n    width: 60vw;\r\n  }\r\n  @media only screen and (max-width: 768px) {\r\n    width: 80vw;\r\n  }\r\n  @media only screen and (max-width: 480px) {\r\n    width: 90vw;\r\n  }\r\n`;\r\nconst LoaderDiv = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  margin: 5%;\r\n`;\r\n\r\nconst UserDetailsContainer = (props) => {\r\n  const searchResults = useSelector((state) => state.searchResults);\r\n  if (props.fetchingUsers) {\r\n    return (\r\n      <LoaderDiv>\r\n        <ReactLoading\r\n          type={\"spin\"}\r\n          color={\"#61dafb\"}\r\n          height={\"10%\"}\r\n          width={\"10%\"}\r\n        />\r\n      </LoaderDiv>\r\n    );\r\n  }\r\n  if (searchResults === null) {\r\n    return <p>Enter a username first</p>;\r\n  } else if (searchResults.length === 0) {\r\n    return <p>No results found</p>;\r\n  } else {\r\n    return (\r\n      <DetailsContainer>\r\n        {searchResults.map((user) => {\r\n          return <UserDetails key={user.id} user={user} />;\r\n        })}\r\n      </DetailsContainer>\r\n    );\r\n  }\r\n};\r\n\r\nexport default UserDetailsContainer;\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport Navbar from \"../Layout/Navbar\";\r\nimport MainContainer from \"../Layout/MainContainer\";\r\nimport UserSearch from \"./search/UserSearch\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport UserDetailsContainer from \"./userInfo/UserDetailsContainer\";\r\n\r\nconst Home = (props) => {\r\n  const dispatch = useDispatch();\r\n  const [fetchingUsers, setFetchingUsers] = React.useState(false);\r\n\r\n  const fetchUsers = async (query) => {\r\n    setFetchingUsers(true);\r\n    const response = await axios.get(\r\n      `https://api.github.com/search/users?q=${query}`\r\n    );\r\n    dispatch({\r\n      type: \"SET_SEARCH_RESULTS\",\r\n      val: response.data.items,\r\n    });\r\n    setFetchingUsers(false);\r\n  };\r\n\r\n  const handleFormSubmit = (query) => {\r\n    fetchUsers(query);\r\n  };\r\n\r\n  return (\r\n    <MainContainer>\r\n      <header>\r\n        <Navbar />\r\n      </header>\r\n      <UserSearch\r\n        handleFormSubmit={handleFormSubmit}\r\n        fetchingUsers={fetchingUsers}\r\n      />\r\n      <UserDetailsContainer fetchingUsers={fetchingUsers} />\r\n    </MainContainer>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport UserRepos from \"./components/RepositoriesPage\";\nimport Home from \"./components/HomePage\";\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/\" exact component={Home}></Route>\n        <Route path=\"/userRepos\" exact component={UserRepos}></Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","const initialState = {\r\n  searchResults: null,\r\n  selectedUsersRepos: null,\r\n  fetchingUsersRepos: false,\r\n};\r\n\r\nconst rootReducer = (state = initialState, action) => {\r\n  let newState = { ...state };\r\n  switch (action.type) {\r\n    case \"SET_SEARCH_RESULTS\":\r\n      newState.searchResults = action.val;\r\n      return newState;\r\n    case \"SET_SELECTED_USERS_REPOS\":\r\n      newState.selectedUsersRepos = action.val;\r\n      return newState;\r\n    case \"FETCHING_USERS_REPOS\":\r\n      newState.fetchingUsersRepos = action.val;\r\n      return newState;\r\n    default:\r\n      return newState;\r\n  }\r\n};\r\n\r\nexport default rootReducer;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n//import * as serviceWorker from './serviceWorker';\n\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport rootReducer from \"./reducers/rootReducer\";\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}